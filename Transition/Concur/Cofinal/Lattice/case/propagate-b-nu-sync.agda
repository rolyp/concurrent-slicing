open import ConcurrentSlicingCommon
open import Transition.Concur.Cofinal.Lattice.Common

module Transition.Concur.Cofinal.Lattice.case.propagate-b-nu-sync
   {Œì} {x x‚Ä≤ : Name Œì} {P‚ÇÄ Q‚ÇÄ} where

   import Relation.Binary.EqReasoning as EqReasoning

   import Name as ·¥∫
   import Ren as ·¥ø
   import Ren.Lattice as ·¥øÃÉ
   import Transition as ·µÄ

{-
   module À£‚àáÀ£
      {R‚ÇÄ S‚ÇÄ S‚Ä≤‚ÇÄ} {F : Q‚ÇÄ ‚Äî[ (‚Ä¢ x‚Ä≤) ·µá - _ ]‚Üí S‚ÇÄ} {F‚Ä≤ : Q‚ÇÄ ‚Äî[ (‚Ä¢ x) ·µá - _ ]‚Üí S‚Ä≤‚ÇÄ} (E : P‚ÇÄ ‚Äî[ x ‚Ä¢ ·µá - _ ]‚Üí R‚ÇÄ)
      (ùêπ : F ‚å£‚ÇÅ[ À£‚àáÀ£ ] F‚Ä≤) (let Q‚Ä≤‚ÇÄ = tgt‚ÇÅ (‚äñ‚ÇÅ ùêπ); Q‚Ä≥‚ÇÄ = tgt‚ÇÇ (‚äñ‚ÇÅ ùêπ)) (P : ‚Üì P‚ÇÄ) (Q : ‚Üì Q‚ÇÄ)
      (IH : (braiding (À£‚àáÀ£ {x = x‚Ä≤} {x}) {0} (Œ≥‚ÇÅ ùêπ) (tgt (E‚Ä≤/E (‚äñ‚ÇÅ ùêπ)) (tgt F Q)) ‚â° tgt (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ)) (tgt F‚Ä≤ Q)))
      (let Œ± : (·¥ø.pop ·¥∫.zero *) ((·¥ø.suc ·¥ø.push *) R‚ÇÄ) ‚â° (id·∂† *) R‚ÇÄ
           Œ± = trans (pop-zero‚àòsuc-push R‚ÇÄ) (sym (*-preserves-id R‚ÇÄ)))
      where

      module _
         (R : ‚Üì R‚ÇÄ) (R‚Ä≤ : ‚Üì (·¥ø.suc ·¥ø.push *) R‚ÇÄ) (S‚Ä≤ : ‚Üì S‚Ä≤‚ÇÄ) (Q‚Ä≤ : ‚Üì Q‚Ä≤‚ÇÄ) (y y‚Ä≤ : ‚Üì (·¥∫.zero {Œì}))
         (‚â°R : tgt E P ‚â° R) (‚â°R‚Ä≤ : tgt ((·¥∫.suc *·µá) E) ((push *ÃÉ) P) ‚â° R‚Ä≤) (‚â°S‚Ä≤ : tgt F‚Ä≤ Q ‚â° S‚Ä≤)
         (‚â°Q‚Ä≤ : tgt (E‚Ä≤/E (‚äñ‚ÇÅ ùêπ)) (tgt F Q) ‚â° Q‚Ä≤) (‚â°y‚Ä≤ : y ‚â° y‚Ä≤) where

         base :
            (Q‚Ä≥ : ‚Üì Q‚Ä≥‚ÇÄ) (‚â°Q‚Ä≥ : tgt (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ)) S‚Ä≤ ‚â° Q‚Ä≥) ‚Üí
            braiding (·µá‚àá·∂ú {a = ‚Ä¢ x‚Ä≤} {œÑ}) {0} (cong‚ÇÇ _‚îÇ_ Œ± (Œ≥‚ÇÅ ùêπ))
            [ (pop y *ÃÉ) R‚Ä≤ ‚îÇ Q‚Ä≤ ]
            ‚â°
            [ (repl y‚Ä≤ *ÃÉ) R ‚îÇ Q‚Ä≥ ]
         base Q‚Ä≥ ‚â°Q‚Ä≥ =
            let Œ≤ : (pop y *ÃÉ) R‚Ä≤ ‚âÖ (repl y‚Ä≤ *ÃÉ) R
                Œ≤ = let open ‚âÖ-Reasoning in
                   begin
                      (pop y *ÃÉ) R‚Ä≤
                   ‚â°‚ü® cong (pop y *ÃÉ) (sym ‚â°R‚Ä≤) ‚ü©
                      (pop y *ÃÉ) (tgt ((·¥∫.suc *·µá) E) ((push *ÃÉ) P))
                   ‚â°‚ü® cong (pop y *ÃÉ) (sym (ren·µá-tgt-comm E push P)) ‚ü©
                      (pop y *ÃÉ) ((suc push *ÃÉ) (tgt E P))
                   ‚âÖ‚ü® pop-zero‚àòsuc-pushÃÉ y _ ‚ü©
                      (repl y *ÃÉ) (tgt E P)
                   ‚â°‚ü® cong (Œª y‚Ä† ‚Üí (repl y‚Ä† *ÃÉ) (tgt E P)) ‚â°y‚Ä≤ ‚ü©
                      (repl y‚Ä≤ *ÃÉ) (tgt E P)
                   ‚â°‚ü® cong (repl y‚Ä≤ *ÃÉ) ‚â°R ‚ü©
                      (repl y‚Ä≤ *ÃÉ) R
                   ‚àé
                Œ¥ : Q‚Ä≤ ‚âÖ Q‚Ä≥
                Œ¥ = let open ‚âÖ-Reasoning in
                   begin
                      Q‚Ä≤
                   ‚â°‚ü® sym ‚â°Q‚Ä≤ ‚ü©
                      tgt (E‚Ä≤/E (‚äñ‚ÇÅ ùêπ)) (tgt F Q)
                   ‚âÖ‚ü® ‚âÖ-sym (reduce-À£‚àáÀ£ {x = x‚Ä≤} {x} (Œ≥‚ÇÅ ùêπ) _) ‚ü©
                      braiding (À£‚àáÀ£ {x = x‚Ä≤} {x}) {0} (Œ≥‚ÇÅ ùêπ) (tgt (E‚Ä≤/E (‚äñ‚ÇÅ ùêπ)) (tgt F Q))
                   ‚â°‚ü® IH ‚ü©
                      tgt (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ)) (tgt F‚Ä≤ Q)
                   ‚â°‚ü® cong (tgt (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ))) ‚â°S‚Ä≤ ‚ü©
                      tgt (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ)) S‚Ä≤
                   ‚â°‚ü® ‚â°Q‚Ä≥ ‚ü©
                      Q‚Ä≥
                   ‚àé
                open ‚âÖ-Reasoning in ‚âÖ-to-‚â°(
            begin
               braiding (·µá‚àá·∂ú {a = ‚Ä¢ x‚Ä≤} {œÑ}) {0} (cong‚ÇÇ _‚îÇ_ Œ± (Œ≥‚ÇÅ ùêπ))
               [ (pop y *ÃÉ) R‚Ä≤ ‚îÇ Q‚Ä≤ ]
            ‚âÖ‚ü® reduce-·µá‚àá·∂ú (cong‚ÇÇ _‚îÇ_ Œ± (Œ≥‚ÇÅ ùêπ)) _ ‚ü©
               [ (pop y *ÃÉ) R‚Ä≤ ‚îÇ Q‚Ä≤ ]
            ‚âÖ‚ü® [-‚îÇ-]-cong Œ± Œ≤ (Œ≥‚ÇÅ ùêπ) Œ¥ ‚ü©
               [ (repl y‚Ä≤ *ÃÉ) R ‚îÇ Q‚Ä≥ ]
            ‚àé)

         subcase :
            braiding (·µá‚àá·∂ú {a = ‚Ä¢ x‚Ä≤} {œÑ}) {0} (cong‚ÇÇ _‚îÇ_ Œ± (Œ≥‚ÇÅ ùêπ))
            [ (pop y *ÃÉ) R‚Ä≤ ‚îÇ Q‚Ä≤ ] ‚â°
            tgt (ŒΩ‚Ä¢ ((id·∂† *) R‚ÇÄ ‚îÇ·∂ú E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ))) [ ŒΩ [ (repl y‚Ä≤ *ÃÉ) R ‚îÇ S‚Ä≤ ] ]
         subcase
            with step (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ)) S‚Ä≤ | inspect (step (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ))) S‚Ä≤
         ... | ‚óª , Q‚Ä≥ | [ ‚â°Q‚Ä≥ ] = base Q‚Ä≥ (,-inj‚ÇÇ ‚â°Q‚Ä≥)
         ... | [ ‚Ä¢ ._ ‚å© ‚óª ‚å™ ·∂ú ] , Q‚Ä≥ | [ ‚â°Q‚Ä≥ ] = base Q‚Ä≥ (,-inj‚ÇÇ ‚â°Q‚Ä≥)
         ... | [ ‚Ä¢ ._ ‚å© [ .·¥∫.zero ] ‚å™ ·∂ú ] , Q‚Ä≥ | [ ‚â°Q‚Ä≥ ] = base Q‚Ä≥ (,-inj‚ÇÇ ‚â°Q‚Ä≥)

      case :
         braiding (·µá‚àá·∂ú {a = ‚Ä¢ x‚Ä≤} {œÑ}) {0} (cong‚ÇÇ _‚îÇ_ Œ± (Œ≥‚ÇÅ ùêπ))
         (tgt ((·¥ø.push *·µá) E ‚îÇ‚Ä¢ E‚Ä≤/E (‚äñ‚ÇÅ ùêπ)) (tgt (P‚ÇÄ ‚îÇ·µá F) [ P ‚îÇ Q ]))
         ‚â°
         (tgt (ŒΩ‚Ä¢ ((id·∂† *) R‚ÇÄ ‚îÇ·∂ú E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ))) (tgt (E ‚îÇ·µ• F‚Ä≤) [ P ‚îÇ Q ]))
      case
         with step E P | step ((·¥ø.push *·µá) E) ((push *ÃÉ) P) | step F‚Ä≤ Q | step (E‚Ä≤/E (‚äñ‚ÇÅ ùêπ)) (tgt F Q) |
              inspect (step E) P | inspect (step ((·¥ø.push *·µá) E)) ((push *ÃÉ) P) |
              inspect (step F‚Ä≤) Q | inspect (step (E‚Ä≤/E (‚äñ‚ÇÅ ùêπ))) (tgt F Q)
      ... | _ , R | _ , R‚Ä≤ | ‚óª , S‚Ä≤ | [ ‚Ä¢ ._ ‚å© y ‚å™ ·∂ú ] , Q‚Ä≤ | [ ‚â°R ] | [ ‚â°R‚Ä≤ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°Q‚Ä≤ ] =
         ‚ä•-elim (‚óª‚â¢[-] (trans (cong (residual À£‚àáÀ£) (sym (,-inj‚ÇÅ ‚â°S‚Ä≤))) (trans (sym (œÄ‚ÇÅ (·¥¨gamma‚ÇÅ ùêπ Q))) (,-inj‚ÇÅ ‚â°Q‚Ä≤))))
      ... | _ , R | _ , R‚Ä≤ | [ ‚Ä¢ ._ Ôπô _ Ôπö ·µá ] , S‚Ä≤ | ‚óª , Q‚Ä≤ | [ ‚â°R ] | [ ‚â°R‚Ä≤ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°Q‚Ä≤ ] =
         ‚ä•-elim (‚óª‚â¢[-] (trans (sym (,-inj‚ÇÅ ‚â°Q‚Ä≤)) (trans (œÄ‚ÇÅ (·¥¨gamma‚ÇÅ ùêπ Q)) (cong (residual À£‚àáÀ£) (,-inj‚ÇÅ ‚â°S‚Ä≤)))))
      ... | ‚óª , R | [ _ ] , R‚Ä≤ | _ , S‚Ä≤ | _ , Q‚Ä≤ | [ ‚â°R ] | [ ‚â°R‚Ä≤ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°Q‚Ä≤ ] =
         ‚ä•-elim (‚óª‚â¢[-] (trans (cong (push ·¥¨*ÃÉ) (sym (,-inj‚ÇÅ ‚â°R))) (trans (ren·µá-action-comm E push P) (,-inj‚ÇÅ ‚â°R‚Ä≤))))
      ... | [ ._ ‚Ä¢ ·µá ] , R | ‚óª , R‚Ä≤ | _ , S‚Ä≤ | _ , Q‚Ä≤ | [ ‚â°R ] | [ ‚â°R‚Ä≤ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°Q‚Ä≤ ] =
         ‚ä•-elim (‚óª‚â¢[-] (trans (sym (,-inj‚ÇÅ ‚â°R‚Ä≤)) (trans (sym (ren·µá-action-comm E push P)) (cong (push ·¥¨*ÃÉ) (,-inj‚ÇÅ ‚â°R)))))
      ... | _ , R | _ , R‚Ä≤ | [ ‚Ä¢ ._ Ôπô [ .·¥∫.zero ] Ôπö ·µá ] , S‚Ä≤ | [ ‚Ä¢ ._ ‚å© ‚óª ‚å™ ·∂ú ] , Q‚Ä≤ | [ ‚â°R ] | [ ‚â°R‚Ä≤ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°Q‚Ä≤ ] =
         let Œ± = trans (sym (,-inj‚ÇÅ ‚â°Q‚Ä≤)) (trans (œÄ‚ÇÅ (·¥¨gamma‚ÇÅ ùêπ Q)) (cong (residual À£‚àáÀ£) (,-inj‚ÇÅ ‚â°S‚Ä≤))) in
         ‚ä•-elim ([‚Ä¢x‚å©‚óª‚å™·∂ú]‚â¢[‚Ä¢x‚å©[-]‚å™·∂ú] Œ±)
      ... | _ , R | _ , R‚Ä≤ | [ ‚Ä¢ ._ Ôπô ‚óª Ôπö ·µá ] , S‚Ä≤ | [ ‚Ä¢ ._ ‚å© [ .·¥∫.zero ] ‚å™ ·∂ú ] , Q‚Ä≤ |
         [ ‚â°R ] | [ ‚â°R‚Ä≤ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°Q‚Ä≤ ] =
         let Œ± = trans (sym (,-inj‚ÇÅ ‚â°Q‚Ä≤)) (trans (œÄ‚ÇÅ (·¥¨gamma‚ÇÅ ùêπ Q)) (cong (residual À£‚àáÀ£) (,-inj‚ÇÅ ‚â°S‚Ä≤))) in
         ‚ä•-elim ([‚Ä¢x‚å©‚óª‚å™·∂ú]‚â¢[‚Ä¢x‚å©[-]‚å™·∂ú] (sym Œ±))
      ... | ‚óª , R | ‚óª , R‚Ä≤ | ‚óª , S‚Ä≤ | ‚óª , Q‚Ä≤ | [ ‚â°R ] | [ ‚â°R‚Ä≤ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°Q‚Ä≤ ] =
         subcase R R‚Ä≤ S‚Ä≤ Q‚Ä≤ ‚óª ‚óª (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤) (,-inj‚ÇÇ ‚â°S‚Ä≤) (,-inj‚ÇÇ ‚â°Q‚Ä≤) refl
      ... | ‚óª , R | ‚óª , R‚Ä≤ | [ ‚Ä¢ ._ Ôπô ‚óª Ôπö ·µá ] , S‚Ä≤ | [ ‚Ä¢ ._ ‚å© ‚óª ‚å™ ·∂ú ] , Q‚Ä≤ | [ ‚â°R ] | [ ‚â°R‚Ä≤ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°Q‚Ä≤ ] =
         subcase R R‚Ä≤ S‚Ä≤ Q‚Ä≤ ‚óª ‚óª (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤) (,-inj‚ÇÇ ‚â°S‚Ä≤) (,-inj‚ÇÇ ‚â°Q‚Ä≤) refl
      ... | ‚óª , R | ‚óª , R‚Ä≤ | [ ‚Ä¢ ._ Ôπô [ .·¥∫.zero ] Ôπö ·µá ] , S‚Ä≤ | [ ‚Ä¢ ._ ‚å© [ .·¥∫.zero ] ‚å™ ·∂ú ] , Q‚Ä≤ |
         [ ‚â°R ] | [ ‚â°R‚Ä≤ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°Q‚Ä≤ ] =
         subcase R R‚Ä≤ S‚Ä≤ Q‚Ä≤ [ ·¥∫.zero ] [ ·¥∫.zero ] (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤) (,-inj‚ÇÇ ‚â°S‚Ä≤) (,-inj‚ÇÇ ‚â°Q‚Ä≤) refl
      ... | [ ._ ‚Ä¢ ·µá ] , R | [ ._ ‚Ä¢ ·µá ] , R‚Ä≤ | ‚óª , S‚Ä≤ | ‚óª , Q‚Ä≤ | [ ‚â°R ] | [ ‚â°R‚Ä≤ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°Q‚Ä≤ ] =
         subcase R R‚Ä≤ S‚Ä≤ Q‚Ä≤ ‚óª ‚óª (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤) (,-inj‚ÇÇ ‚â°S‚Ä≤) (,-inj‚ÇÇ ‚â°Q‚Ä≤) refl
      ... | [ ._ ‚Ä¢ ·µá ] , R | [ ._ ‚Ä¢ ·µá ] , R‚Ä≤ | [ ‚Ä¢ ._ Ôπô ‚óª Ôπö ·µá ] , S‚Ä≤ | [ ‚Ä¢ ._ ‚å© ‚óª ‚å™ ·∂ú ] , Q‚Ä≤ |
         [ ‚â°R ] | [ ‚â°R‚Ä≤ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°Q‚Ä≤ ] =
         subcase R R‚Ä≤ S‚Ä≤ Q‚Ä≤ ‚óª ‚óª (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤) (,-inj‚ÇÇ ‚â°S‚Ä≤) (,-inj‚ÇÇ ‚â°Q‚Ä≤) refl
      ... | [ ._ ‚Ä¢ ·µá ] , R | [ ._ ‚Ä¢ ·µá ] , R‚Ä≤ | [ ‚Ä¢ ._ Ôπô [ .·¥∫.zero ] Ôπö ·µá ] , S‚Ä≤ | [ ‚Ä¢ ._ ‚å© [ .·¥∫.zero ] ‚å™ ·∂ú ] , Q‚Ä≤ |
         [ ‚â°R ] | [ ‚â°R‚Ä≤ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°Q‚Ä≤ ] =
         subcase R R‚Ä≤ S‚Ä≤ Q‚Ä≤ [ ·¥∫.zero ] [ ·¥∫.zero ] (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤) (,-inj‚ÇÇ ‚â°S‚Ä≤) (,-inj‚ÇÇ ‚â°Q‚Ä≤) refl
-}

   module ·µá‚àá·µá-‚Ä¢x
      {R‚ÇÄ S‚ÇÄ S‚Ä≤‚ÇÄ : Proc (Œì + 1)} {F : Q‚ÇÄ ‚Äî[ (‚Ä¢ x‚Ä≤) ·µá - _ ]‚Üí S‚ÇÄ} {F‚Ä≤ : Q‚ÇÄ ‚Äî[ (‚Ä¢ x) ·µá - _ ]‚Üí S‚Ä≤‚ÇÄ}
      (E : P‚ÇÄ ‚Äî[ x ‚Ä¢ ·µá - _ ]‚Üí R‚ÇÄ) (ùêπ : F ‚å£‚ÇÅ[ ·µá‚àá·µá ] F‚Ä≤) (let Q‚Ä≤‚ÇÄ = tgt‚ÇÅ (‚äñ‚ÇÅ ùêπ); Q‚Ä≥‚ÇÄ = tgt‚ÇÇ (‚äñ‚ÇÅ ùêπ))
      (P : ‚Üì P‚ÇÄ) (Q : ‚Üì Q‚ÇÄ)
      (IH : braiding (·µá‚àá·µá {a = ‚Ä¢ x‚Ä≤} {‚Ä¢ x}) {0} (Œ≥‚ÇÅ ùêπ) (tgt (E‚Ä≤/E (‚äñ‚ÇÅ ùêπ)) (tgt F Q)) ‚â° tgt (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ)) (tgt F‚Ä≤ Q))
      (let Œ± : (id·∂† *) ((·¥ø.suc ·¥ø.push *) R‚ÇÄ) ‚â° (·¥ø.swap *) ((·¥ø.push *) ((id·∂† *) R‚ÇÄ))
           Œ± = let open EqReasoning (setoid _) in
             begin
                (id·∂† *) ((·¥ø.suc ·¥ø.push *) R‚ÇÄ)
             ‚â°‚ü® *-preserves-id _ ‚ü©
                (·¥ø.suc ·¥ø.push *) R‚ÇÄ
             ‚â°‚ü® cong (·¥ø.suc ·¥ø.push *) (sym (*-preserves-id R‚ÇÄ)) ‚ü©
                (·¥ø.suc ·¥ø.push *) ((id·∂† *) R‚ÇÄ)
             ‚â°‚ü® swap‚àòpush _ ‚ü©
                (·¥ø.swap *) ((·¥ø.push *) ((id·∂† *) R‚ÇÄ))
             ‚àé
           Œ≤ : ŒΩ ((id·∂† *) ((·¥ø.suc ·¥ø.push *) R‚ÇÄ) ‚îÇ Q‚Ä≤‚ÇÄ) ‚â° ŒΩ ((·¥ø.swap *) ((·¥ø.push *) ((id·∂† *) R‚ÇÄ)) ‚îÇ (·¥ø.swap *) Q‚Ä≥‚ÇÄ)
           Œ≤ = (cong ŒΩ_ (cong‚ÇÇ _‚îÇ_ Œ± (swap-swap (Œ≥‚ÇÅ ùêπ))))) where

{-
      module _
         (R : ‚Üì R‚ÇÄ) (S‚Ä≤ : ‚Üì S‚Ä≤‚ÇÄ) (P‚Ä≥ : ‚Üì (·¥ø.suc ·¥ø.push *) R‚ÇÄ) (P‚Ä≤ : ‚Üì Q‚Ä≤‚ÇÄ)
         (‚â°R : tgt E P ‚â° R) (‚â°S‚Ä≤ : tgt F‚Ä≤ Q ‚â° S‚Ä≤) (‚â°P‚Ä≥ : tgt ((·¥∫.suc *·µá) E) ((push *ÃÉ) P) ‚â° P‚Ä≥)
         (‚â°P‚Ä≤ : tgt (E‚Ä≤/E (‚äñ‚ÇÅ ùêπ)) (tgt F Q) ‚â° P‚Ä≤) where

         base :
            (Q‚Ä≥ : ‚Üì Q‚Ä≥‚ÇÄ) (‚â°Q‚Ä≥ : tgt (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ)) S‚Ä≤ ‚â° Q‚Ä≥) ‚Üí
            braiding (·µá‚àá·∂ú {a = ‚Ä¢ x‚Ä≤} {œÑ}) {0} Œ≤
            [ ŒΩ [ P‚Ä≥ ‚îÇ P‚Ä≤ ] ]
            ‚â°
            [ ŒΩ [ (swap *ÃÉ) ((push *ÃÉ) R) ‚îÇ (swap *ÃÉ) Q‚Ä≥ ] ]
         base Q‚Ä≥ ‚â°Q‚Ä≥ =
            let Œ≥ : P‚Ä≥ ‚âÖ (swap *ÃÉ) ((push *ÃÉ) R)
                Œ≥ = let open ‚âÖ-Reasoning in
                   begin
                      P‚Ä≥
                   ‚â°‚ü® sym ‚â°P‚Ä≥ ‚ü©
                      tgt ((·¥ø.push *·µá) E) ((push *ÃÉ) P)
                   ‚â°‚ü® sym (ren·µá-tgt-comm E push P) ‚ü©
                      (suc push *ÃÉ) (tgt E P)
                   ‚âÖ‚ü® swap‚àòpushÃÉ _ ‚ü©
                      (swap *ÃÉ) ((push *ÃÉ) (tgt E P))
                   ‚â°‚ü® cong ((swap *ÃÉ) ‚àò·∂† (push *ÃÉ)) ‚â°R ‚ü©
                      (swap *ÃÉ) ((push *ÃÉ) R)
                   ‚àé
                Œ¥ : P‚Ä≤ ‚âÖ (swap *ÃÉ) Q‚Ä≥
                Œ¥ = let open ‚âÖ-Reasoning in
                   begin
                      P‚Ä≤
                   ‚â°‚ü® sym ‚â°P‚Ä≤ ‚ü©
                      tgt (E‚Ä≤/E (‚äñ‚ÇÅ ùêπ)) (tgt F Q)
                   ‚âÖ‚ü® ‚âÖ-sym (swap-involutiveÃÉ _) ‚ü©
                      (swap *ÃÉ) ((swap *ÃÉ) (tgt (E‚Ä≤/E (‚äñ‚ÇÅ ùêπ)) (tgt F Q)))
                   ‚âÖ‚ü® ‚âÖ-cong‚ú¥ ‚Üì_ (Œ≥‚ÇÅ ùêπ) (swap *ÃÉ) (‚âÖ-sym (reduce-·µá‚àá·µá (Œ≥‚ÇÅ ùêπ) _)) ‚ü©
                      (swap *ÃÉ) (braiding (·µá‚àá·µá {a = ‚Ä¢ x‚Ä≤} {‚Ä¢ x}) {0} (Œ≥‚ÇÅ ùêπ) (tgt (E‚Ä≤/E (‚äñ‚ÇÅ ùêπ)) (tgt F Q)))
                   ‚â°‚ü® cong (swap *ÃÉ) IH ‚ü©
                      (swap *ÃÉ) (tgt (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ)) (tgt F‚Ä≤ Q))
                   ‚â°‚ü® cong ((swap *ÃÉ) ‚àò·∂† tgt (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ))) ‚â°S‚Ä≤ ‚ü©
                      (swap *ÃÉ) (tgt (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ)) S‚Ä≤)
                   ‚â°‚ü® cong (swap *ÃÉ) ‚â°Q‚Ä≥ ‚ü©
                      (swap *ÃÉ) Q‚Ä≥
                   ‚àé
                open ‚âÖ-Reasoning in ‚âÖ-to-‚â° (
            begin
               braiding (·µá‚àá·∂ú {a = ‚Ä¢ x‚Ä≤} {œÑ}) {0} Œ≤ [ ŒΩ [ P‚Ä≥ ‚îÇ P‚Ä≤ ] ]
            ‚âÖ‚ü® reduce-·µá‚àá·∂ú Œ≤ _ ‚ü©
               [ ŒΩ [ P‚Ä≥ ‚îÇ P‚Ä≤ ] ]
            ‚âÖ‚ü® [ŒΩ-]-cong (cong‚ÇÇ _‚îÇ_ Œ± (swap-swap (Œ≥‚ÇÅ ùêπ))) ([-‚îÇ-]-cong Œ± Œ≥ (swap-swap (Œ≥‚ÇÅ ùêπ)) Œ¥) ‚ü©
               [ ŒΩ [ (swap *ÃÉ) ((push *ÃÉ) R) ‚îÇ (swap *ÃÉ) Q‚Ä≥ ] ]
            ‚àé)

         subcase :
            braiding (·µá‚àá·∂ú {a = ‚Ä¢ x‚Ä≤} {œÑ}) {0} Œ≤
            [ ŒΩ [ P‚Ä≥ ‚îÇ P‚Ä≤ ] ]
            ‚â°
            tgt (ŒΩ·µá (R‚ÇÄ ‚îÇ·µá E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ))) [ ŒΩ [ R ‚îÇ S‚Ä≤ ] ]
         subcase
            with step (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ)) S‚Ä≤ | inspect (step (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ))) S‚Ä≤
         ... | ‚óª , Q‚Ä≥ | [ ‚â°Q‚Ä≥ ] = base Q‚Ä≥ (,-inj‚ÇÇ ‚â°Q‚Ä≥)
         ... | [ (‚Ä¢ ._) ·µá ] , Q‚Ä≥ | [ ‚â°Q‚Ä≥ ] = base Q‚Ä≥ (,-inj‚ÇÇ ‚â°Q‚Ä≥)
-}

      case :
         braiding (·µá‚àá·∂ú {a = ‚Ä¢ x‚Ä≤} {œÑ}) {0} Œ≤
         (tgt ((·¥ø.push *·µá) E ‚îÇ·µ• E‚Ä≤/E (‚äñ‚ÇÅ ùêπ)) (tgt (P‚ÇÄ ‚îÇ·µá F) [ P ‚îÇ Q ]))
         ‚â°
         tgt (ŒΩ·µá ((id·∂† *) (·µÄ.tgt E) ‚îÇ·µá E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ))) (tgt (E ‚îÇ·µ• F‚Ä≤) [ P ‚îÇ Q ])
      case
         with step E P | step ((·¥ø.push *·µá) E) ((push *ÃÉ) P) | step F‚Ä≤ Q | step (E‚Ä≤/E (‚äñ‚ÇÅ ùêπ)) (tgt F Q) |
              inspect (step E) P | inspect (step ((·¥∫.suc *·µá) E)) ((push *ÃÉ) P) | inspect (step F‚Ä≤) Q |
              inspect (step (E‚Ä≤/E (‚äñ‚ÇÅ ùêπ))) (tgt F Q)
      ... | ‚óª , R | [ ._ ‚Ä¢ ·µá ] , P‚Ä≥ | _ , S‚Ä≤ | _ , P‚Ä≤ | [ ‚â°R ] | [ ‚â°P‚Ä≥ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°P‚Ä≤ ] =
         ‚ä•-elim (‚óª‚â¢[-] (trans (cong (push ·¥¨*ÃÉ) (sym (,-inj‚ÇÅ ‚â°R))) (trans (ren·µá-action-comm E push P) (,-inj‚ÇÅ ‚â°P‚Ä≥))))
      ... | [ ._ ‚Ä¢ ·µá ] , R | ‚óª , P‚Ä≥ | _ , S‚Ä≤ | _ , P‚Ä≤ | [ ‚â°R ] | [ ‚â°P‚Ä≥ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°P‚Ä≤ ] =
         ‚ä•-elim (‚óª‚â¢[-] (trans (sym (,-inj‚ÇÅ ‚â°P‚Ä≥)) (trans (sym (ren·µá-action-comm E push P)) (cong (push ·¥¨*ÃÉ) (,-inj‚ÇÅ ‚â°R)))))
      ... | _ , R | _ , P‚Ä≥ | ‚óª , S‚Ä≤ | [ _ ] , P‚Ä≤ | [ ‚â°R ] | [ ‚â°P‚Ä≥ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°P‚Ä≤ ] =
         ‚ä•-elim (‚óª‚â¢[-] (trans (cong (push ·¥¨*ÃÉ) (sym (,-inj‚ÇÅ ‚â°S‚Ä≤))) (trans (sym (œÄ‚ÇÅ (·¥¨gamma‚ÇÅ ùêπ Q))) (,-inj‚ÇÅ ‚â°P‚Ä≤))))
      ... | _ , R | _ , P‚Ä≥ | [ ‚Ä¢ ._ Ôπô _ Ôπö ·µá ] , S‚Ä≤ | ‚óª , P‚Ä≤ | [ ‚â°R ] | [ ‚â°P‚Ä≥ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°P‚Ä≤ ] =
         ‚ä•-elim (‚óª‚â¢[-] (trans (,-inj‚ÇÅ (sym ‚â°P‚Ä≤)) (trans (œÄ‚ÇÅ (·¥¨gamma‚ÇÅ ùêπ Q)) (cong (push ·¥¨*ÃÉ) (,-inj‚ÇÅ ‚â°S‚Ä≤)))))
      ... | ‚óª , R | ‚óª , P‚Ä≥ | ‚óª , S‚Ä≤ | ‚óª , P‚Ä≤ | [ ‚â°R ] | [ ‚â°P‚Ä≥ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°P‚Ä≤ ] =
         ? -- subcase R S‚Ä≤ P‚Ä≥ P‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°S‚Ä≤) (,-inj‚ÇÇ ‚â°P‚Ä≥) (,-inj‚ÇÇ ‚â°P‚Ä≤)
      ... | ‚óª , R | ‚óª , P‚Ä≥ | [ _ ] , S‚Ä≤ | [ _ ] , P‚Ä≤ | [ ‚â°R ] | [ ‚â°P‚Ä≥ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°P‚Ä≤ ] =
         ? -- subcase R S‚Ä≤ P‚Ä≥ P‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°S‚Ä≤) (,-inj‚ÇÇ ‚â°P‚Ä≥) (,-inj‚ÇÇ ‚â°P‚Ä≤)
      ... | [ ._ ‚Ä¢ ·µá ] , R | [ ._ ‚Ä¢ ·µá ] , P‚Ä≥ | ‚óª , S‚Ä≤ | ‚óª , P‚Ä≤ | [ ‚â°R ] | [ ‚â°P‚Ä≥ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°P‚Ä≤ ] =
         ? -- subcase R S‚Ä≤ P‚Ä≥ P‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°S‚Ä≤) (,-inj‚ÇÇ ‚â°P‚Ä≥) (,-inj‚ÇÇ ‚â°P‚Ä≤)
      ... | [ ._ ‚Ä¢ ·µá ] , R | [ ._ ‚Ä¢ ·µá ] , P‚Ä≥ | [ ‚Ä¢ ._ Ôπô _ Ôπö ·µá ] , S‚Ä≤ | [ ‚Ä¢ ._ Ôπô _ Ôπö ·µá ] , P‚Ä≤ |
         [ ‚â°R ] | [ ‚â°P‚Ä≥ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°P‚Ä≤ ] =
         ? -- subcase R S‚Ä≤ P‚Ä≥ P‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°S‚Ä≤) (,-inj‚ÇÇ ‚â°P‚Ä≥) (,-inj‚ÇÇ ‚â°P‚Ä≤)

{-
   module ·µá‚àá·µá-x‚Ä¢
      {R‚ÇÄ S‚ÇÄ S‚Ä≤‚ÇÄ : Proc (Œì + 1)} {F : Q‚ÇÄ ‚Äî[ x‚Ä≤ ‚Ä¢ ·µá - _ ]‚Üí S‚ÇÄ} {F‚Ä≤ : Q‚ÇÄ ‚Äî[ (‚Ä¢ x) ·µá - _ ]‚Üí S‚Ä≤‚ÇÄ}
      (E : P‚ÇÄ ‚Äî[ x ‚Ä¢ ·µá - _ ]‚Üí R‚ÇÄ) (ùêπ : F ‚å£‚ÇÅ[ ·µá‚àá·µá ] F‚Ä≤) (let Q‚Ä≤‚ÇÄ = tgt‚ÇÅ (‚äñ‚ÇÅ ùêπ); Q‚Ä≥‚ÇÄ = tgt‚ÇÇ (‚äñ‚ÇÅ ùêπ))
      (P : ‚Üì P‚ÇÄ) (Q : ‚Üì Q‚ÇÄ)
      (IH : braiding (·µá‚àá·µá {a = x‚Ä≤ ‚Ä¢} {‚Ä¢ x}) {0} (Œ≥‚ÇÅ ùêπ) (tgt (E‚Ä≤/E (‚äñ‚ÇÅ ùêπ)) (tgt F Q)) ‚â° tgt (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ)) (tgt F‚Ä≤ Q))
      (let Œ± : (·¥ø.suc ·¥ø.push *) R‚ÇÄ ‚â° (·¥ø.swap *) ((·¥ø.push *) R‚ÇÄ)
           Œ± = swap‚àòpush R‚ÇÄ
           Œ≤ : ŒΩ ((·¥ø.suc ·¥ø.push *) R‚ÇÄ ‚îÇ Q‚Ä≤‚ÇÄ) ‚â° ·µÄ.tgt (ŒΩ·µá (R‚ÇÄ ‚îÇ·µá E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ)))
           Œ≤ = cong ŒΩ_ (cong‚ÇÇ _‚îÇ_ Œ± (swap-swap (Œ≥‚ÇÅ ùêπ)))) where

      module _
         (R : ‚Üì R‚ÇÄ) (S‚Ä≤ : ‚Üì S‚Ä≤‚ÇÄ) (P‚Ä≥ : ‚Üì (·¥ø.suc ·¥ø.push *) R‚ÇÄ) (P‚Ä≤ : ‚Üì Q‚Ä≤‚ÇÄ)
         (‚â°R : tgt E P ‚â° R) (‚â°S‚Ä≤ : tgt F‚Ä≤ Q ‚â° S‚Ä≤) (‚â°P‚Ä≥ : tgt ((·¥∫.suc *·µá) E) ((push *ÃÉ) P) ‚â° P‚Ä≥)
         (‚â°P‚Ä≤ : tgt (E‚Ä≤/E (‚äñ‚ÇÅ ùêπ)) (tgt F Q) ‚â° P‚Ä≤) where

         base :
            (Q‚Ä≥ : ‚Üì Q‚Ä≥‚ÇÄ) (‚â°Q‚Ä≥ : tgt (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ)) S‚Ä≤ ‚â° Q‚Ä≥) ‚Üí
            braiding (·µá‚àá·∂ú {a = x‚Ä≤ ‚Ä¢} {œÑ}) {0} Œ≤
            [ ŒΩ [ P‚Ä≥ ‚îÇ P‚Ä≤ ] ]
            ‚â°
            [ ŒΩ [ (swap *ÃÉ) ((push *ÃÉ) R) ‚îÇ (swap *ÃÉ) Q‚Ä≥ ] ]
         base Q‚Ä≥ ‚â°Q‚Ä≥ =
            let Œ≥ : P‚Ä≥ ‚âÖ (swap *ÃÉ) ((push *ÃÉ) R)
                Œ≥ = let open ‚âÖ-Reasoning in
                   begin
                      P‚Ä≥
                   ‚â°‚ü® sym ‚â°P‚Ä≥ ‚ü©
                      tgt ((·¥ø.push *·µá) E) ((push *ÃÉ) P)
                   ‚â°‚ü® sym (ren·µá-tgt-comm E push P) ‚ü©
                      (suc push *ÃÉ) (tgt E P)
                   ‚âÖ‚ü® swap‚àòpushÃÉ _ ‚ü©
                      (swap *ÃÉ) ((push *ÃÉ) (tgt E P))
                   ‚â°‚ü® cong ((swap *ÃÉ) ‚àò·∂† (push *ÃÉ)) ‚â°R ‚ü©
                      (swap *ÃÉ) ((push *ÃÉ) R)
                   ‚àé
                Œ¥ : P‚Ä≤ ‚âÖ (swap *ÃÉ) Q‚Ä≥
                Œ¥ = let open ‚âÖ-Reasoning in
                   begin
                      P‚Ä≤
                   ‚â°‚ü® sym ‚â°P‚Ä≤ ‚ü©
                      tgt (E‚Ä≤/E (‚äñ‚ÇÅ ùêπ)) (tgt F Q)
                   ‚âÖ‚ü® ‚âÖ-sym (swap-involutiveÃÉ _) ‚ü©
                      (swap *ÃÉ) ((swap *ÃÉ) (tgt (E‚Ä≤/E (‚äñ‚ÇÅ ùêπ)) (tgt F Q)))
                   ‚âÖ‚ü® ‚âÖ-cong‚ú¥ ‚Üì_ (Œ≥‚ÇÅ ùêπ) (swap *ÃÉ) (‚âÖ-sym (reduce-·µá‚àá·µá (Œ≥‚ÇÅ ùêπ) _)) ‚ü©
                      (swap *ÃÉ) (braiding (·µá‚àá·µá {a = x‚Ä≤ ‚Ä¢} {‚Ä¢ x}) {0} (Œ≥‚ÇÅ ùêπ) (tgt (E‚Ä≤/E (‚äñ‚ÇÅ ùêπ)) (tgt F Q)))
                   ‚â°‚ü® cong (swap *ÃÉ) IH ‚ü©
                      (swap *ÃÉ) (tgt (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ)) (tgt F‚Ä≤ Q))
                   ‚â°‚ü® cong ((swap *ÃÉ) ‚àò·∂† tgt (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ))) ‚â°S‚Ä≤ ‚ü©
                      (swap *ÃÉ) (tgt (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ)) S‚Ä≤)
                   ‚â°‚ü® cong (swap *ÃÉ) ‚â°Q‚Ä≥ ‚ü©
                      (swap *ÃÉ) Q‚Ä≥
                   ‚àé
                open ‚âÖ-Reasoning in ‚âÖ-to-‚â° (
            begin
               braiding (·µá‚àá·∂ú {a = x‚Ä≤ ‚Ä¢} {œÑ}) {0} Œ≤ [ ŒΩ [ P‚Ä≥ ‚îÇ P‚Ä≤ ] ]
            ‚âÖ‚ü® reduce-·µá‚àá·∂ú Œ≤ _ ‚ü©
               [ ŒΩ [ P‚Ä≥ ‚îÇ P‚Ä≤ ] ]
            ‚âÖ‚ü® [ŒΩ-]-cong (cong‚ÇÇ _‚îÇ_ Œ± (swap-swap (Œ≥‚ÇÅ ùêπ))) ([-‚îÇ-]-cong Œ± Œ≥ (swap-swap (Œ≥‚ÇÅ ùêπ)) Œ¥) ‚ü©
               [ ŒΩ [ (swap *ÃÉ) ((push *ÃÉ) R) ‚îÇ (swap *ÃÉ) Q‚Ä≥ ] ]
            ‚àé)

         subcase :
            braiding (·µá‚àá·∂ú {a = x‚Ä≤ ‚Ä¢} {œÑ}) {0} Œ≤
            [ ŒΩ [ P‚Ä≥ ‚îÇ P‚Ä≤ ] ]
            ‚â°
            œÄ‚ÇÇ (step‚Åª (ŒΩ·µá (R‚ÇÄ ‚îÇ·µá E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ))) (ŒΩ [ R ‚îÇ S‚Ä≤ ]))
         subcase
            with step (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ)) S‚Ä≤ | inspect (step (E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ))) S‚Ä≤
         ... | ‚óª , Q‚Ä≥ | [ ‚â°Q‚Ä≥ ] = base Q‚Ä≥ (,-inj‚ÇÇ ‚â°Q‚Ä≥)
         ... | [ ._ ‚Ä¢ ·µá ] , Q‚Ä≥ | [ ‚â°Q‚Ä≥ ] = base Q‚Ä≥ (,-inj‚ÇÇ ‚â°Q‚Ä≥)

      case :
         braiding (·µá‚àá·∂ú {a = x‚Ä≤ ‚Ä¢} {œÑ}) {0} Œ≤
         (tgt ((·¥ø.push *·µá) E ‚îÇ·µ• E‚Ä≤/E (‚äñ‚ÇÅ ùêπ)) (tgt (P‚ÇÄ ‚îÇ·µá F) [ P ‚îÇ Q ]))
         ‚â°
         tgt (ŒΩ·µá (·µÄ.tgt E ‚îÇ·µá E/E‚Ä≤ (‚äñ‚ÇÅ ùêπ))) (tgt (E ‚îÇ·µ• F‚Ä≤) [ P ‚îÇ Q ])
      case
         with step E P | step ((·¥ø.push *·µá) E) ((push *ÃÉ) P) | step F‚Ä≤ Q | step (E‚Ä≤/E (‚äñ‚ÇÅ ùêπ)) (tgt F Q) |
              inspect (step E) P | inspect (step ((·¥ø.push *·µá) E)) ((push *ÃÉ) P) | inspect (step F‚Ä≤) Q |
              inspect (step (E‚Ä≤/E (‚äñ‚ÇÅ ùêπ))) (tgt F Q)
      ... | ‚óª , R | [ ._ ‚Ä¢ ·µá ] , P‚Ä≥ | _ , S‚Ä≤ | _ , P‚Ä≤ | [ ‚â°R ] | [ ‚â°P‚Ä≥ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°P‚Ä≤ ] =
         ‚ä•-elim (‚óª‚â¢[-] (trans (cong (push ·¥¨*ÃÉ) (sym (,-inj‚ÇÅ ‚â°R))) (trans (ren·µá-action-comm E push P) (,-inj‚ÇÅ ‚â°P‚Ä≥))))
      ... | [ ._ ‚Ä¢ ·µá ] , R | ‚óª , P‚Ä≥ | _ , S‚Ä≤ | _ , P‚Ä≤ | [ ‚â°R ] | [ ‚â°P‚Ä≥ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°P‚Ä≤ ] =
         ‚ä•-elim (‚óª‚â¢[-] (trans (sym (,-inj‚ÇÅ ‚â°P‚Ä≥)) (trans (sym (ren·µá-action-comm E push P)) (cong (push ·¥¨*ÃÉ) (,-inj‚ÇÅ ‚â°R)))))
      ... | _ , R | _ , P‚Ä≥ | ‚óª , S‚Ä≤ | [ _ ] , P‚Ä≤ | [ ‚â°R ] | [ ‚â°P‚Ä≥ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°P‚Ä≤ ] =
         ‚ä•-elim (‚óª‚â¢[-] (trans (cong (push ·¥¨*ÃÉ) (sym (,-inj‚ÇÅ ‚â°S‚Ä≤))) (trans (sym (œÄ‚ÇÅ (·¥¨gamma‚ÇÅ ùêπ Q))) (,-inj‚ÇÅ ‚â°P‚Ä≤))))
      ... | _ , R | _ , P‚Ä≥ | [ (‚Ä¢ ._) ·µá ] , S‚Ä≤ | ‚óª , P‚Ä≤ | [ ‚â°R ] | [ ‚â°P‚Ä≥ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°P‚Ä≤ ] =
         ‚ä•-elim (‚óª‚â¢[-] (trans (,-inj‚ÇÅ (sym ‚â°P‚Ä≤)) (trans (œÄ‚ÇÅ (·¥¨gamma‚ÇÅ ùêπ Q)) (cong (push ·¥¨*ÃÉ) (,-inj‚ÇÅ ‚â°S‚Ä≤)))))
      ... | ‚óª , R | ‚óª , P‚Ä≥ | ‚óª , S‚Ä≤ | ‚óª , P‚Ä≤ | [ ‚â°R ] | [ ‚â°P‚Ä≥ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°P‚Ä≤ ] =
         subcase R S‚Ä≤ P‚Ä≥ P‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°S‚Ä≤) (,-inj‚ÇÇ ‚â°P‚Ä≥) (,-inj‚ÇÇ ‚â°P‚Ä≤)
      ... | ‚óª , R | ‚óª , P‚Ä≥ | [ _ ] , S‚Ä≤ | [ _ ] , P‚Ä≤ | [ ‚â°R ] | [ ‚â°P‚Ä≥ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°P‚Ä≤ ] =
         subcase R S‚Ä≤ P‚Ä≥ P‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°S‚Ä≤) (,-inj‚ÇÇ ‚â°P‚Ä≥) (,-inj‚ÇÇ ‚â°P‚Ä≤)
      ... | [ ._ ‚Ä¢ ·µá ] , R | [ ._ ‚Ä¢ ·µá ] , P‚Ä≥ | ‚óª , S‚Ä≤ | ‚óª , P‚Ä≤ | [ ‚â°R ] | [ ‚â°P‚Ä≥ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°P‚Ä≤ ] =
         subcase R S‚Ä≤ P‚Ä≥ P‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°S‚Ä≤) (,-inj‚ÇÇ ‚â°P‚Ä≥) (,-inj‚ÇÇ ‚â°P‚Ä≤)
      ... | [ ._ ‚Ä¢ ·µá ] , R | [ ._ ‚Ä¢ ·µá ] , P‚Ä≥ | [ (‚Ä¢ ._) ·µá ] , S‚Ä≤ | [ (‚Ä¢ ._) ·µá ] , P‚Ä≤ | [ ‚â°R ] | [ ‚â°P‚Ä≥ ] | [ ‚â°S‚Ä≤ ] | [ ‚â°P‚Ä≤ ] =
         subcase R S‚Ä≤ P‚Ä≥ P‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°S‚Ä≤) (,-inj‚ÇÇ ‚â°P‚Ä≥) (,-inj‚ÇÇ ‚â°P‚Ä≤)
-}
