module Transition.Concur.Cofinal.Lattice.Helpers.nu-propagate-b-c where

   open import ConcurrentSlicingCommon
   import Ren as ·¥ø
   open import Transition.Concur.Cofinal.Lattice.Common

   module x‚Ä¢-‚Ä¢x‚å©y‚å™
      {Œì P‚ÇÄ R‚ÇÄ R‚Ä≤‚ÇÄ} {x x‚Ä≤ y : Name Œì} {E : P‚ÇÄ ‚Äî[ (‚Ä¢ ·¥ø.push x) ·µá - _ ]‚Üí R‚ÇÄ}
      {E‚Ä≤ : P‚ÇÄ ‚Äî[ ‚Ä¢ ·¥ø.push x‚Ä≤ ‚å© ·¥ø.push y ‚å™ ·∂ú - _ ]‚Üí R‚Ä≤‚ÇÄ} (ùê∏ : E ‚å£‚ÇÅ[ ·µá‚àá·∂ú ] E‚Ä≤) (P : ‚Üì P‚ÇÄ)
      (let P‚Ä≤‚ÇÄ = tgt‚ÇÅ (‚äñ‚ÇÅ ùê∏); P‚Ä≥‚ÇÄ = tgt‚ÇÇ (‚äñ‚ÇÅ ùê∏))
      (IH : braiding (·µá‚àá·∂ú {a = ‚Ä¢ ·¥ø.push x} {‚Ä¢ ·¥ø.push x‚Ä≤ ‚å© ·¥ø.push y ‚å™}) {0} (Œ≥‚ÇÅ ùê∏)
            (tgt (E‚Ä≤/E (‚äñ‚ÇÅ ùê∏)) (tgt E P)) ‚â° tgt (E/E‚Ä≤ (‚äñ‚ÇÅ ùê∏)) (tgt E‚Ä≤ P))
      where

      private
         module sub
            (R : ‚Üì R‚ÇÄ) (R‚Ä≤ : ‚Üì R‚Ä≤‚ÇÄ) (‚â°R : tgt E P ‚â° R) (‚â°R‚Ä≤ : tgt E‚Ä≤ P ‚â° R‚Ä≤) where

            postulate
             case‚Ä≤ :
               braiding (·µá‚àá·∂ú {a = ‚Ä¢ x} {‚Ä¢ x‚Ä≤ ‚å© y ‚å™}) {0} (cong ŒΩ_ (cong (·¥ø.swap *) (Œ≥‚ÇÅ ùê∏)))
               (œÄ‚ÇÇ (step‚Åª (ŒΩ·∂ú (·¥ø.swap *·∂ú) (E‚Ä≤/E (‚äñ‚ÇÅ ùê∏))) (ŒΩ (swap *ÃÉ) R))) ‚â° œÄ‚ÇÇ (step‚Åª (ŒΩ·µá E/E‚Ä≤ (‚äñ‚ÇÅ ùê∏)) (ŒΩ R‚Ä≤))

      open sub

      case :
         braiding (·µá‚àá·∂ú {a = ‚Ä¢ x} {‚Ä¢ x‚Ä≤ ‚å© y ‚å™}) {0} (Œ≥‚ÇÅ (ŒΩ·µá·∂ú ùê∏))
         (tgt (E‚Ä≤/E (‚äñ‚ÇÅ (ŒΩ·µá·∂ú ùê∏))) (tgt (ŒΩ·µá E) [ ŒΩ P ])) ‚â° tgt (E/E‚Ä≤ (‚äñ‚ÇÅ (ŒΩ·µá·∂ú ùê∏))) (tgt (ŒΩ·∂ú E‚Ä≤) [ ŒΩ P ])
      case
         with step E‚Ä≤ P | step E P | inspect (step E‚Ä≤) P | inspect (step E) P
      ... | ‚óª , R‚Ä≤ | ‚óª , R | [ ‚â°R‚Ä≤ ] | [ ‚â°R ] = case‚Ä≤ R R‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤)
      ... | ‚óª , R‚Ä≤ | [ (‚Ä¢ ._) ·µá ] , R | [ ‚â°R‚Ä≤ ] | [ ‚â°R ] = case‚Ä≤ R R‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤)
      ... | [ ‚Ä¢ ._ ‚å© ‚óª ‚å™ ·∂ú ] , R‚Ä≤ | ‚óª , R | [ ‚â°R‚Ä≤ ] | [ ‚â°R ] = case‚Ä≤ R R‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤)
      ... | [ ‚Ä¢ ._ ‚å© [ ._ ] ‚å™ ·∂ú ] , R‚Ä≤ | ‚óª , R | [ ‚â°R‚Ä≤ ] | [ ‚â°R ] = case‚Ä≤ R R‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤)
      ... | [ ‚Ä¢ ._ ‚å© ‚óª ‚å™ ·∂ú ] , R‚Ä≤ | [ (‚Ä¢ ._) ·µá ] , R | [ ‚â°R‚Ä≤ ] | [ ‚â°R ] = case‚Ä≤ R R‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤)
      ... | [ ‚Ä¢ ._ ‚å© [ ._ ] ‚å™ ·∂ú ] , R‚Ä≤ | [ (‚Ä¢ ._) ·µá ] , R | [ ‚â°R‚Ä≤ ] | [ ‚â°R ] = case‚Ä≤ R R‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤)
