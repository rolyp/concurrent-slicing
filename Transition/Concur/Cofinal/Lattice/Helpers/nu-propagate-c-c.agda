module Transition.Concur.Cofinal.Lattice.Helpers.nu-propagate-c-c where

   open import ConcurrentSlicingCommon
   import Ren as ·¥ø
   open import Transition.Concur.Cofinal.Lattice.Common

   module ŒΩ·∂ú·∂ú
      {Œì P‚ÇÄ R‚ÇÄ R‚Ä≤‚ÇÄ} {x y x‚Ä≤ y‚Ä≤ : Name Œì} {E : P‚ÇÄ ‚Äî[ ‚Ä¢ ·¥ø.push x ‚å© ·¥ø.push y ‚å™ ·∂ú - _ ]‚Üí R‚ÇÄ}
      {E‚Ä≤ : P‚ÇÄ ‚Äî[ ‚Ä¢ ·¥ø.push x‚Ä≤ ‚å© ·¥ø.push y‚Ä≤ ‚å™ ·∂ú - _ ]‚Üí R‚Ä≤‚ÇÄ} (ùê∏ : E ‚å£‚ÇÅ[ ·∂ú‚àá·∂ú ] E‚Ä≤) (P : ‚Üì P‚ÇÄ)
      (let P‚Ä≤‚ÇÄ = tgt‚ÇÅ (‚äñ‚ÇÅ ùê∏); P‚Ä≥‚ÇÄ = tgt‚ÇÇ (‚äñ‚ÇÅ ùê∏))
      where

      module sub
         (R : ‚Üì R‚ÇÄ) (R‚Ä≤ : ‚Üì R‚Ä≤‚ÇÄ) (‚â°R : tgt E P ‚â° R) (‚â°R‚Ä≤ : tgt E‚Ä≤ P ‚â° R‚Ä≤) where

         case‚Ä≤ :
            braiding (·∂ú‚àá·∂ú {a = ‚Ä¢ x ‚å© y ‚å™} {‚Ä¢ x‚Ä≤ ‚å© y‚Ä≤ ‚å™}) {0} (cong ŒΩ_ (Œ≥‚ÇÅ ùê∏))
            (œÄ‚ÇÇ (step‚Åª (ŒΩ·∂ú E‚Ä≤/E (‚äñ‚ÇÅ ùê∏)) (ŒΩ R))) ‚â°
            œÄ‚ÇÇ (step‚Åª (ŒΩ·∂ú E/E‚Ä≤ (‚äñ‚ÇÅ ùê∏)) (ŒΩ R‚Ä≤))
         case‚Ä≤
            with step (E‚Ä≤/E (‚äñ‚ÇÅ ùê∏)) R | step (E/E‚Ä≤ (‚äñ‚ÇÅ ùê∏)) R‚Ä≤
         case‚Ä≤ | ‚óª , P‚Ä≤ | ‚óª , P‚Ä≥ = {!!}
         case‚Ä≤ | ‚óª , P‚Ä≤ | [ ‚Ä¢ ._ ‚å© ‚óª ‚å™ ·∂ú ] , P‚Ä≥ = {!!}
         case‚Ä≤ | ‚óª , P‚Ä≤ | [ ‚Ä¢ ._ ‚å© [ ._ ] ‚å™ ·∂ú ] , P‚Ä≥ = {!!}
         case‚Ä≤ | [ ‚Ä¢ ._ ‚å© ‚óª ‚å™ ·∂ú ] , P‚Ä≤ | ‚óª , P‚Ä≥ = {!!}
         case‚Ä≤ | [ ‚Ä¢ ._ ‚å© [ ._ ] ‚å™ ·∂ú ] , P‚Ä≤ | ‚óª , P‚Ä≥ = {!!}
         case‚Ä≤ | [ ‚Ä¢ ._ ‚å© ‚óª ‚å™ ·∂ú ] , P‚Ä≤ | [ ‚Ä¢ ._ ‚å© ‚óª ‚å™ ·∂ú ] , P‚Ä≥ = {!!}
         case‚Ä≤ | [ ‚Ä¢ ._ ‚å© ‚óª ‚å™ ·∂ú ] , P‚Ä≤ | [ ‚Ä¢ ._ ‚å© [ ._ ] ‚å™ ·∂ú ] , P‚Ä≥ = {!!}
         case‚Ä≤ | [ ‚Ä¢ ._ ‚å© [ ._ ] ‚å™ ·∂ú ] , P‚Ä≤ | [ ‚Ä¢ ._ ‚å© ‚óª ‚å™ ·∂ú ] , P‚Ä≥ = {!!}
         case‚Ä≤ | [ ‚Ä¢ ._ ‚å© [ ._ ] ‚å™ ·∂ú ] , P‚Ä≤ | [ ‚Ä¢ ._ ‚å© [ ._ ] ‚å™ ·∂ú ] , P‚Ä≥ = {!!}

      case :
         braiding (·∂ú‚àá·∂ú {a = ‚Ä¢ x ‚å© y ‚å™} {‚Ä¢ x‚Ä≤ ‚å© y‚Ä≤ ‚å™}) {0} (cong ŒΩ_ (Œ≥‚ÇÅ ùê∏))
         (tgt (ŒΩ·∂ú E‚Ä≤/E (‚äñ‚ÇÅ ùê∏)) (tgt (ŒΩ·∂ú E) [ ŒΩ P ])) ‚â°
         tgt (ŒΩ·∂ú E/E‚Ä≤ (‚äñ‚ÇÅ ùê∏)) (tgt (ŒΩ·∂ú E‚Ä≤) [ ŒΩ P ])
      case
         with step E‚Ä≤ P | step E P | inspect (step E‚Ä≤) P | inspect (step E) P
      ... | ‚óª , R‚Ä≤ | ‚óª , R | [ ‚â°R‚Ä≤ ] | [ ‚â°R ] =
         let open sub R R‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤) in case‚Ä≤
      ... | ‚óª , R‚Ä≤ | [ ‚Ä¢ ._ ‚å© ‚óª ‚å™ ·∂ú ] , R | [ ‚â°R‚Ä≤ ] | [ ‚â°R ] =
         let open sub R R‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤) in case‚Ä≤
      ... | ‚óª , R‚Ä≤ | [ ‚Ä¢ ._ ‚å© [ ._ ] ‚å™ ·∂ú ] , R | [ ‚â°R‚Ä≤ ] | [ ‚â°R ] =
         let open sub R R‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤) in case‚Ä≤
      ... | [ ‚Ä¢ ._ ‚å© ‚óª ‚å™ ·∂ú ] , R‚Ä≤ | ‚óª , R | [ ‚â°R‚Ä≤ ] | [ ‚â°R ] =
         let open sub R R‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤) in case‚Ä≤
      ... | [ ‚Ä¢ ._ ‚å© [ ._ ] ‚å™ ·∂ú ] , R‚Ä≤ | ‚óª , R | [ ‚â°R‚Ä≤ ] | [ ‚â°R ] =
         let open sub R R‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤) in case‚Ä≤
      ... | [ ‚Ä¢ ._ ‚å© ‚óª ‚å™ ·∂ú ] , R‚Ä≤ | [ ‚Ä¢ ._ ‚å© ‚óª ‚å™ ·∂ú ] , R | [ ‚â°R‚Ä≤ ] | [ ‚â°R ] =
         let open sub R R‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤) in case‚Ä≤
      ... | [ ‚Ä¢ ._ ‚å© ‚óª ‚å™ ·∂ú ] , R‚Ä≤ | [ ‚Ä¢ ._ ‚å© [ ._ ] ‚å™ ·∂ú ] , R | [ ‚â°R‚Ä≤ ] | [ ‚â°R ] =
         let open sub R R‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤) in case‚Ä≤
      ... | [ ‚Ä¢ ._ ‚å© [ ._ ] ‚å™ ·∂ú ] , R‚Ä≤ | [ ‚Ä¢ ._ ‚å© ‚óª ‚å™ ·∂ú ] , R | [ ‚â°R‚Ä≤ ] | [ ‚â°R ] =
         let open sub R R‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤) in case‚Ä≤
      ... | [ ‚Ä¢ ._ ‚å© [ ._ ] ‚å™ ·∂ú ] , R‚Ä≤ | [ ‚Ä¢ ._ ‚å© [ ._ ] ‚å™ ·∂ú ] , R | [ ‚â°R‚Ä≤ ] | [ ‚â°R ] =
         let open sub R R‚Ä≤ (,-inj‚ÇÇ ‚â°R) (,-inj‚ÇÇ ‚â°R‚Ä≤) in case‚Ä≤
